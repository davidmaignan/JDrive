Guice:
http://stackoverflow.com/questions/28734581/guice-singleton-static-injection-pattern

https://www.airpair.com/neo4j/posts/getting-started-with-neo4j-and-cypher
http://wes.skeweredrook.com/cypher-it-doesnt-all-start-with-the-start/

Delete recursively
http://stackoverflow.com/questions/25101026/how-to-delete-nodes-recursively-from-a-start-node
http://stackoverflow.com/questions/29714877/neo4j-how-to-delete-nodes-recursively-from-some-start-node

Cypher:

match (n) return n;

Get file with no relation
match (n) --> (m) where not (m) --> () return m;

Get relations
match (n)-->(b) return b;


Get field
match (n) return n.title;


Get relations for db
match (file {title:'db'}) --> (r) where not (r) -> () return r; //not working

match a=(node {n: 'root'}) --> (m) return m -->();

match (n {n: 'root'}) --> (m) return n, m -->();

match (n {n: 'root'}) --> (m) return n, m -->();

MATCH (n) MATCH (n)-[r]->() DELETE n,r;

//OK ?
MATCH (n {n:'a'}) OPTIONAL MATCH (n)-[r*]->(p) foreach (rel in r | delete rel) DELETE p with n OPTIONAL MATCH (b)-[r2]-(n)
 delete r2,n;

MATCH (n {n:'root'}) OPTIONAL MATCH (n)-[r]-(m)-[s]->() return n,r,m,s;

start n=node(*) return n;

create (root:Node {n:"root"}), (a:Node {n:"a"}), (b:Node {n:"b"}), (c:Node {n:"c"}),
(d:Node {n:"d"}), (e:Node {n:"e"}), (f:Node {n:"f"}), (g:Node {n:"g"}), (h:Node {n:"h"}),
(i:Node {n:"i"}), (j:Node {n:"j"}), (k:Node {n:"k"}), (l:Node {n:"l"}), (m:Node {n:"m"}),
(n:Node {n:"n"}), (o:Node {n:"o"}), (p:Node {n:"p"}), (q:Node {n:"q"}),
(r:Node {n:"r"}),(s:Node {n:"s"}),
root-[:PARENT]->a, root-[:PARENT]->b, a-[:PARENT]->c, a-[:PARENT]->d, b-[:PARENT]->e, b-[:PARENT]->f,
c-[:PARENT]->g, c-[:PARENT]->h, d-[:PARENT]->i, d-[:PARENT]->j, e-[:PARENT]->k, e-[:PARENT]->l,
f-[:PARENT]->m, f-[:PARENT]->n, g-[:PARENT]->o, g-[:PARENT]->p, h-[:PARENT]->q, r-[:CHANGE]->a, s-[:CHANGE]->r;

MATCH (n) MATCH (n)-[r]-() return n,r;



start category= (node{n:'root'}) match path = category-[*]-> subcategory return category, collect(subcategory);

//Delete all except a
match path=(n {n:'a'})-[r*]-(e) foreach (rel in r|delete rel) delete e;

//Get child nodes recursively
match path=(n {n:'a'})-[r*]->(e) return n,e;

//Delete relation and children node
match path=(n {n:'a'})-[r*]->(e) foreach (rel in r | delete rel) delete e;


start a=node({n:'a'}) match (a)-[r*]->(e) foreach (rel in r | delete rel) delete a,e;


match (p:Node) where p.n='a' with p OPTIONAL MATCH (p)-[r*]->(t) foreach (rel in r | delete rel) delete t


//Delete longest relation and its node
match p=(n {n:'a'})-[r*]->() with p order by length(p) desc limit 1 foreach(r in relationships(p) | delete r) delete p;

//Delete
MATCH (n {n:'a'}) OPTIONAL MATCH (b)-[r]-(n) delete r,n;

match (file {identifier:'0AHmMPOF_fWirUk9PVA'}) OPTIONAL MATCH (file)-[r:CHILD*]->(p) foreach (rel in r | delete rel) return p;

(•_•)
<)   )
 /    \
  (•_•)
<(   (>
  /    \

match (n {n:'a'}) match (n)<-[r*]->(m) foreach (rel in r | delete rel) return n;


match (n {n:'a'}), (others) where (others)-[:CHILD*]->(n) with others match (others)-[r]-() delete others, r with (n {n:'a'}) match (n)<-[r2:PARENT]-() return r2, n;

match (n {n:'a'}), (others) where (others)-[:CHILD*]->(n) with n match (n)<-[r2:PARENT]-() return r2, n;

http://neo4j.com/docs/stable/cypher-refcard/

match (n)<-[r:CHANGE*]-(m) where n.n = 'a' with m, count(r) AS length order by length desc limit 1  return  m;


----------------
Change:

File <-[r:CHANGE]- Change Node | relationship Start (change node) - End (file node)

match (change) return change;